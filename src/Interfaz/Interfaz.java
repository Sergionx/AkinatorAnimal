/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import akinator.ArbolBinarioDesicion;
import akinator.HashTable;
import akinator.Nodo;
import akinator.StringUtils;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swing_viewer.SwingViewer;
import org.graphstream.ui.swing_viewer.ViewPanel;
import org.graphstream.ui.view.Viewer;

/**
 * Clase encargada de la interacción entre el usuarios y los datos
 * @author Sergionx
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public static HashTable hashTable = new HashTable(10111);
    public static Graph grafico;
    public static ArbolBinarioDesicion arbolBinarioDesicion = new ArbolBinarioDesicion();
    public static Nodo pActual = null;
    public static Nodo nuevoAnimal = null;
    public static Nodo nuevaPregunta = null;
    
    public static boolean jugar = false; //Determina si estoy jugando o no
    public static boolean equivocacion = false; // Determina si no pude adivinar el animal
    public static boolean correccion = false; // Determina si estoy esperando lque caracteriza la diferencia entre los animales
    public static boolean respuestaCorreccion = false; // Determina si ya recibí dicha diferencia
    
    public Interfaz() {
        grafico = new SingleGraph("arbol");
        viewer = new SwingViewer(grafico, Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
        viewer.enableAutoLayout();
        initComponents();
        String file = "src\\akinator\\InputInicial.csv";
        LeerCsvString(file);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LeerCsv = new javax.swing.JButton();
        Jugar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MensajeJugar = new javax.swing.JTextArea();
        EnviarRespuesta = new javax.swing.JButton();
        Respuesta = new javax.swing.JTextField();
        BuscarAnimal = new javax.swing.JButton();
        Guardar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        vizualizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LeerCsv.setText("Leer csv");
        LeerCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeerCsvActionPerformed(evt);
            }
        });
        jPanel1.add(LeerCsv, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 90, 40));

        Jugar.setText("Empezar a Jugar");
        Jugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JugarActionPerformed(evt);
            }
        });
        jPanel1.add(Jugar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 130, 40));

        MensajeJugar.setColumns(20);
        MensajeJugar.setRows(5);
        jScrollPane1.setViewportView(MensajeJugar);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 310, 150));

        EnviarRespuesta.setText("Enviar Respuesta");
        EnviarRespuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarRespuestaActionPerformed(evt);
            }
        });
        jPanel1.add(EnviarRespuesta, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 270, 120, 40));
        jPanel1.add(Respuesta, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 240, 140, -1));

        BuscarAnimal.setText("Buscar Animal");
        BuscarAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarAnimalActionPerformed(evt);
            }
        });
        jPanel1.add(BuscarAnimal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, 110, 40));

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        jPanel1.add(Guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 320, 80, 40));

        jLabel2.setFont(new java.awt.Font("Eras Bold ITC", 1, 36)); // NOI18N
        jLabel2.setText("ADIVINADOR DE ANIMALES");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, -1, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Escribe aquí tu respuesta:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 240, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Para empezar, selecciona el archivo:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Si desesas, puedes buscar un animal");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, -1, 10));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("en nuestra base de datos:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, -1, -1));

        vizualizar.setText("Visualizar ");
        vizualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vizualizarActionPerformed(evt);
            }
        });
        jPanel1.add(vizualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 310, 100, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaz/imagen/jungle-animals-cartoon-vector.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-90, -150, 910, 770));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 740, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
    * Lee un csv dado el camino (usado solamente en la inicializacion de la interfaz)
    * @author Sergionx
    */
    private void AddHashTable(Nodo pRoot){
        if (pRoot != null) {
            AddHashTable(pRoot.getHijoIzq());
            AddHashTable(pRoot.getHijoDer());
            
            if (ArbolBinarioDesicion.isAnaimal(pRoot)) {
                hashTable.insertar(pRoot.getData());
            }
        }
    }
    
    
    /**
    * Lee un csv dado el camino (usado solamente en la inicializacion de la interfaz)
    * @author Sergionx
    */
    private  void LeerCsvString(String path){
        BufferedReader reader = null;
        String aux = "";
        try {
            reader = new BufferedReader(new FileReader(path));
            while ((aux = reader.readLine()) != null) {
                String[] line = aux.split(",");
                
                if (line.length == 0 || "Pregunta".equals(line[0]) ) {
                           continue;
                }
                arbolBinarioDesicion.Insertar(line[0].trim(), line[1].trim(), line[2].trim(), arbolBinarioDesicion.getRoot());
                Node node1 = grafico.getNode(StringUtils.Capitalize(line[0].trim()));
                if(node1 == null){
                    node1 = grafico.addNode(StringUtils.Capitalize(line[0].trim()));
                    node1.setAttribute("ui.label", StringUtils.Capitalize(line[0].trim()));
                }
                Node node2 = grafico.getNode(StringUtils.Capitalize(line[1].trim()));
                if(node2 == null){
                    node2 = grafico.addNode(StringUtils.Capitalize(line[1].trim()));
                    node2.setAttribute("ui.label", StringUtils.Capitalize(line[1].trim()));
                }
                Node node3 = grafico.getNode(StringUtils.Capitalize(line[2].trim()));
                if(node3 == null){
                    node3 = grafico.addNode(StringUtils.Capitalize(line[2].trim()));
                    node3.setAttribute("ui.label", line[2].trim());
                }
                grafico.addEdge(node1.getId()+node2.getId(), node1, node2).setAttribute("ui.label","No");
                grafico.addEdge(node1.getId()+node3.getId(), node1, node3).setAttribute("ui.label","Si");
            }
            reader.close();
            AddHashTable(arbolBinarioDesicion.getRoot());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Asegúrese de que los datos que esté pasando sean correctos");
        }
    }
    
    /**
    * Lee un csv dado escogido con JFileCHooser
    * @author Sergionx
    */
    private void LeerCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeerCsvActionPerformed
        if (arbolBinarioDesicion.getRoot() != null) {
            arbolBinarioDesicion.setRoot(null);
            grafico.clear();
        }
        
        JFileChooser file = new JFileChooser();
        file.showOpenDialog(this);

        String aux = "";

        try {
            File abre = file.getSelectedFile();

            if(abre!=null)
            {
                FileReader archivos = new FileReader(abre);
                BufferedReader buffer = new BufferedReader(archivos);

                boolean first = true;
                boolean datos = false;
                while((aux = buffer.readLine())!= null)
                {
                  String[] line = aux.split(",");
                
                    if (line.length == 0 || "Pregunta".equals(line[0]) ) {
                               continue;
                    }
                    arbolBinarioDesicion.Insertar(line[0].trim(), line[1].trim(), line[2].trim(), arbolBinarioDesicion.getRoot());
                    Node node1 = grafico.getNode(line[0].trim());
                    if(node1 == null){
                        node1 = grafico.addNode(StringUtils.Capitalize(line[0].trim()));
                        node1.setAttribute("ui.label", StringUtils.Capitalize(line[0].trim()));
                    }
                    Node node2 = grafico.getNode(line[1].trim());
                    if(node2 == null){
                        node2 = grafico.addNode(StringUtils.Capitalize(line[1].trim()));
                        node2.setAttribute("ui.label", StringUtils.Capitalize(line[1].trim()));
                    }
                    Node node3 = grafico.getNode(StringUtils.Capitalize(line[2].trim()));
                    if(node3 == null){
                        node3 = grafico.addNode(StringUtils.Capitalize(line[2].trim()));
                        node3.setAttribute("ui.label", StringUtils.Capitalize(line[2].trim()));
                    }
                    grafico.addEdge(node1.getId()+node2.getId(), node1, node2).setAttribute("ui.label","No");
                    grafico.addEdge(node1.getId()+node3.getId(), node1, node3).setAttribute("ui.label","Si");
                }
                buffer.close();
                AddHashTable(arbolBinarioDesicion.getRoot());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Asegúrese de que los datos que esté pasando sean correctos");
        }
    }//GEN-LAST:event_LeerCsvActionPerformed
    
    /**
    * Imprime el mensaje inicial y activa la varabile jugar en true
    * @author Sergionx
    */
    private void JugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JugarActionPerformed
        MensajeJugar.setText("¿Estás listo para jugar una ronda? \n");
        jugar = true;
        
    }//GEN-LAST:event_JugarActionPerformed
    
    
    /**
    * Se encarga de simular la funcionalidad de akinator
    * @author Sergionx
    */
    private void EnviarRespuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarRespuestaActionPerformed
       String respuesta = Respuesta.getText();
        if (respuestaCorreccion) { //Recibo la respuesta a mi pregunta de correción
            if ("si".equals(respuesta.trim().toLowerCase())) {
                nuevaPregunta.setHijoIzq(pActual);
                nuevaPregunta.setHijoDer(nuevoAnimal);
                grafico.addEdge(nuevaPregunta.getData()+pActual.getData(),StringUtils.Capitalize(nuevaPregunta.getData()),StringUtils.Capitalize(pActual.getData())).setAttribute("ui.label","No");
                grafico.addEdge(nuevaPregunta.getData()+nuevoAnimal.getData(),StringUtils.Capitalize(nuevaPregunta.getData()),StringUtils.Capitalize(nuevoAnimal.getData())).setAttribute("ui.label","Si");
            } else if ("no".equals(respuesta.trim().toLowerCase())) {
                nuevaPregunta.setHijoIzq(nuevoAnimal);
                nuevaPregunta.setHijoDer(pActual);                
                grafico.addEdge(nuevaPregunta.getData()+pActual.getData(),StringUtils.Capitalize(nuevaPregunta.getData()),StringUtils.Capitalize(nuevoAnimal.getData())).setAttribute("ui.label","No");
                grafico.addEdge(nuevaPregunta.getData()+nuevoAnimal.getData(),StringUtils.Capitalize(nuevaPregunta.getData()),StringUtils.Capitalize(pActual.getData())).setAttribute("ui.label","Si");
            } else {
                JOptionPane.showMessageDialog(null, "Por favor escriba una respuesta valida");
                return;
            }
            
            Nodo padre = arbolBinarioDesicion.Padre(pActual, arbolBinarioDesicion.getRoot()); //Busco el padre del animal en el que fallé para cambiar su hijo
            if (padre.getHijoIzq().getData().equals(pActual.getData())) {
                padre.setHijoIzq(nuevaPregunta);
                grafico.addEdge(padre.getData()+nuevaPregunta.getData(), StringUtils.Capitalize(padre.getData()), StringUtils.Capitalize(nuevaPregunta.getData())).setAttribute("ui.label","No");
            } else {
                padre.setHijoDer(nuevaPregunta);
                grafico.addEdge(padre.getData()+nuevaPregunta.getData(), StringUtils.Capitalize(padre.getData()), StringUtils.Capitalize(nuevaPregunta.getData())).setAttribute("ui.label","Si");
            }
           
            MensajeJugar.append("¡Muchas gracias!, ahora soy mucho más inteligente que antes. \n");
            respuestaCorreccion = false;
            Respuesta.setText("");
            jugar = false;
            return;
        }
       
       
        if (correccion) { // Pregunto qué caracteriza el nuevo animal
            MensajeJugar.append("Si el animal fuera un " + StringUtils.Capitalize(nuevoAnimal.getData()) + ", ¿cuál sería la respuesta a la pregunta? \n");
            
            correccion = false;
            respuestaCorreccion = true;
            nuevaPregunta = new Nodo(respuesta);
            grafico.addNode(StringUtils.Capitalize(respuesta)).setAttribute("ui.label", respuesta);
            
            return;
        }
       
       if (equivocacion) { //No adivinó el animal
            nuevoAnimal = new Nodo(respuesta);
            grafico.addNode(StringUtils.Capitalize(respuesta)).setAttribute("ui.label", respuesta);
            MensajeJugar.append("¿Qué diferencia a un " + StringUtils.Capitalize(pActual.getData()) + 
                    " y un " + StringUtils.Capitalize(respuesta) + "? \n");
            
            equivocacion = false;
            correccion = true;
            Respuesta.setText("");
            hashTable.insertar(respuesta);
            return;
        }
        
        if (!jugar) { //El juego ya se terminó
            JOptionPane.showMessageDialog(null, "Necesita darle al botón de empezar a jugar para volver a jugar");
            return;
        }
       
        if ("".equals(MensajeJugar.getText())) {
            JOptionPane.showMessageDialog(null, "Necesita darle al botón de empezar a jugar primero");
            return;
        }
        
        if (arbolBinarioDesicion.getRoot() == null) { //No se ha cargado el arbol
            JOptionPane.showMessageDialog(null, "Asegúrese de leer un árbol antes de empezar a jugar");
            return;
        }

        if ("¿Estás listo para jugar una ronda? \n".equals(MensajeJugar.getText())) {
            if ("si".equals(respuesta.trim().toLowerCase())) {
                pActual = arbolBinarioDesicion.getRoot();
                String pregunta = "¿" + StringUtils.Capitalize(pActual.getData()) + "?\n";
                
                MensajeJugar.append(pregunta);
                Respuesta.setText("");
                return;
            } else if ("no".equals(respuesta.trim().toLowerCase())) {
                MensajeJugar.append("Vuelve cuando estés preparado para perder.");
                Respuesta.setText("");
                return;
            } else {
                JOptionPane.showMessageDialog(null, "Por favor escriba una respuesta valida");
                Respuesta.setText("");
                return;
            }
        }
        
        if (arbolBinarioDesicion.isAnaimal(pActual)) {
            if ("si".equals(respuesta.trim().toLowerCase())) {
                MensajeJugar.append("¡Qué fácil, ponlo más difícil la próxima vez! \n");
                
                jugar = false;
                Respuesta.setText("");
                return;
            } else if ("no".equals(respuesta.trim().toLowerCase())) { //Agregar nuevo animal
                 MensajeJugar.append("¿Qué animal era? \n");
                 
                 Respuesta.setText("");
                 equivocacion = true;
                return;
            } else {
                JOptionPane.showMessageDialog(null, "Por favor escriba una respuesta valida");
                Respuesta.setText("");
                return;
            }
        }
        
        
        String pregunta;
        if ("si".equals(respuesta.trim().toLowerCase())) {
                pActual = pActual.getHijoDer();
                if (arbolBinarioDesicion.isAnaimal(pActual)) {
                    pregunta = "¿Es un " +  StringUtils.Capitalize(pActual.getData())+ "?\n";
                } else {
                    pregunta = "¿" +  StringUtils.Capitalize(pActual.getData()) + "?\n";
                }
                MensajeJugar.append(pregunta);
                
            } else if ("no".equals(respuesta.trim().toLowerCase())) {
                pActual = pActual.getHijoIzq();
                
                if (arbolBinarioDesicion.isAnaimal(pActual)) {
                    pregunta = "¿Es un " +  StringUtils.Capitalize(pActual.getData()) + "?\n";
                } else {
                    pregunta = "¿" +  StringUtils.Capitalize(pActual.getData()) + "?\n";                
                }
                MensajeJugar.append(pregunta);
            } else {
                JOptionPane.showMessageDialog(null, "Por favor escriba una respuesta valida");
                return;
        }
        
        
        Respuesta.setText("");
    }//GEN-LAST:event_EnviarRespuestaActionPerformed

    
    /**
     * Se crea el boton de buscar el animal que el usuario quiera encontrar
     * @author Roman Chacin
     */
    
    private void BuscarAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarAnimalActionPerformed
       String BuscarElem = JOptionPane.showInputDialog("Ingrese nombre del animal que desea buscar en nuestro arbol de animales: ");
       
       Nodo encontrado = hashTable.buscar(BuscarElem);
        if (encontrado != null) {
            JOptionPane.showMessageDialog(null, "Si existe el animal que ingresaste");   
        } else {
            JOptionPane.showMessageDialog(null, "No existe el animal que ingresaste");
        }
    }//GEN-LAST:event_BuscarAnimalActionPerformed
    /**
     * Boton de guardar que guardara la base de conocimientos ya 
     * existente y tambien lo nuevo aprendido en un nuevo archivo csv
     * @author Karen Davila
     */
    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        String contenido = "Pregunta,No,Si";
                contenido += arbolBinarioDesicion.recorrerPreOrden(arbolBinarioDesicion.getRoot());
        JFileChooser file = new JFileChooser();
        file.setFileFilter(new FileNameExtensionFilter("csv", "csv"));
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
       if(file.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            File f = file.getSelectedFile();
            try{
            PrintWriter printWriter = new PrintWriter(f);
            printWriter.print(contenido);
            printWriter.close();
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo");
            }
        }   
    }//GEN-LAST:event_GuardarActionPerformed

    /**
     * Boton de visualizar que mostrara el grafico del arbol con la base de 
     * conocimientos 
     * @author Karen Davila
     */
    private void vizualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vizualizarActionPerformed
        javax.swing.JFrame f = new JFrame();      
        f.setSize(1000, 1000);
        javax.swing.JPanel arbol = (ViewPanel)viewer.addDefaultView(false);
        arbol.setSize(1000, 1000);        
        f.add(arbol);
        f.setVisible(true);
    }//GEN-LAST:event_vizualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuscarAnimal;
    private javax.swing.JButton EnviarRespuesta;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton Jugar;
    private javax.swing.JButton LeerCsv;
    private javax.swing.JTextArea MensajeJugar;
    private javax.swing.JTextField Respuesta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton vizualizar;
    // End of variables declaration//GEN-END:variables
    private Viewer viewer;
}
